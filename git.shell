#!/bin/env bash
#
# Copyright (c) Roberto A. Foglietta, 2022-2023
#
# Authors:
#  Roberto A. Foglietta <roberto.foglietta@gmail.com>
#
# SPDX-License-Identifier: GPLv3
#
#set -x && resetx="set +x" # RAF: source, paired with set +x at the end of file
set -u                     # RAF: only for devel, comment in main

THIS_FILE_NAME="$(basename ${BASH_SOURCE[0]})"

if [ ${GFRELOAD:-0} -ne 0 ]; then #############################################
###############################################################################

# RAF: restricted shell cannot redirect to file but it is fine
#      to redirect to a open file descriptor towards /dev/null
#      So, also exec could fail but in gitshell &3 is just open
exec 3>/dev/null || return $?

echo "Loading ${THIS_FILE_NAME} into current bash enviroment"

#echo "loading git.shell..."
#echo "cmdline: ${BASH_SOURCE[@]}"

if [ ${GITSHELL:-0} -ne 1 ]; then
    SRC_FILE=$(readlink -f ${BASH_SOURCE[0]})
    export gfrefdir_path="$(dirname ${SRC_FILE})"
    export gfcolors_pathname="${gfrefdir_path}/colors.shell"
    export gfunctions_pathname="${gfrefdir_path}/git.functions"
    export gitshell_pathname="${gfrefdir_path}/git.shell"
    export gfreload_pathname="${gitshell_pathname}"
    if ! echo "${PATH}" | egrep -q $gfrefdir_path; then
        export PATH="$gfrefdir_path/bin:${PATH}"
    fi
fi

export gf_gitshell_rcinit=".gitshrc"

if ! type colors_codes_generation 2>&3; then
    GFRELOAD=1 source "${gfcolors_pathname}"
    : #RAF: the line above will be stripped
fi >&3

function egnc() {
    command egrep --color=never "$@"
}
export -f egnc

gitglobign=$(command git config --global --get core.excludesfile)
if [ -z "${gitglobign}" ]; then
    git config --global core.excludesfile "$HOME/.gitignore"
    gitglobign=$(command git config --global --get core.excludesfile)
fi
if [ -n "${gitglobign}" ]; then
    touch "${gitglobign}"
    if ! egnc -q "^${gf_gitshell_rcinit}\*$" "${gitglobign}"; then
        echo "${gf_gitshell_rcinit}"'*' | tee -a "${gitglobign}" >&3
    fi
fi
unset gitglobign

###############################################################################

function ps1p() {
    echo 'export PS1="\[${nlcyn}\]${gitshell_prefix:-+}\[${crst}\]:\[${nlgrn}\]git-'\
'\$( (opst||echo shell) 2>&3)\[${crst}\]:\[${nlylw}\]\$( (bcur||hcur) 2>&3)\[${crst}\]'\
':\[${BLWHT}\]${PWD##*/}\[${CRST}\]> "'
}
export -f ps1p

function ps1s() {
    eval "$(ps1p)"
}
export -f ps1s

function _gitshell() {
    function stripsource() {
        local va="source.*gfcolors_pathname"
        local vb="source.*gfunctions_pathname"
        local vc="source.*gitshell_pathname"
        egnc -ve "$va" -ve "$vb" -ve "$vc" "$1"
    }

    local gitshrc="./${gf_gitshell_rcinit}"
    export gitshell_prefix=${gitshell_prefix:-}
    declare -i gitshellplus=${gitshellplus:-0} ret=0
    if [ "x${gitshell_prefix:0:1}" == "x+" -o -z "${gitshell_prefix}" ]; then
        gitshell_prefix="+${gitshell_prefix}" 
    fi

    if [ ! -e "${gitshrc}" ]; then
        if true; then
            echo "#!/bin/env bash"
            ps1p
            echo "declare -rx GITSHELL=1 2>&1 | head -n0"
            stripsource ${gfcolors_pathname}
            stripsource ${gitshell_pathname}
            stripsource ${gfunctions_pathname}
            echo "unset gfcolors_pathname gitshell_pathname"
            echo "export gfunctions_pathname='${gitshrc}'"
#           echo "export gfreload_pathname='${gitshrc}'"
#           echo "gflist() { echo -e '$(gflist)'; }"
            echo 'gfreload() { echo -e "\n'$WARNING': reload is not allowed is this gitshell\n"; }'
            echo 'gfupdate() { echo -e "\n'$WARNING': update is not allowed is gitshell\n"; }'
            echo 'exit() { command exit ${1:-} 2>&3; }'
            echo 'gfexit() { exit 123; }'
            echo "export gitc='${gitshrc}'"
#           echo "echo gitshrc: ${gitshrc}; echo"
        fi | tee "${gitshrc}" >&3
        chmod a-w "${gitshrc}"
    fi

    let gitshellplus++
    export gitshellplus

    local tmpf="${gitshrc}"
    tmpf=$(mktemp ${gitshrc}.XXXX)
    if true; then
        echo "#!/bin/env bash"
        echo "GFRELOAD=1 source ${gitshrc} >&3"
        if [ ${STANDALONE:-0} -ne 0 ]; then
            echo 'gfreload() { command exit 2>&3; }'
            echo 'gitshell() { _gitshell "$@"; }'
            echo 'echo -e "${blcyn}WELCOME${crst}: enter ${blwht}gfexit${crst} to leave\n"'
            echo "declare -r STANDALONE=0"
        fi
        echo "$@"
        echo "set +x"
        echo "trap 'rm -f $tmpf' EXIT"
        echo "trap 'rm -f $tmpf; exit' QUIT KILL"
        echo "declare -rxf gfreload gitshell gfupdate gfexit"
        echo "echo local gitshrc: ${tmpf}; echo"
    fi | tee ${tmpf} >&3
    local gitbash="gitshellplus=${gitshellplus} bash --rcfile '${tmpf}' -ri"
    if [ $gitshellplus -eq 1 ]; then
        eval $gitbash 3>/dev/null || ret=$?
    else
        eval $gitbash || ret=$?
    fi
    rm -f ${tmpf}

    let gitshellplus--
    if [ ${gitshellplus} -le 0 ]; then
        rm -f "${gitshrc}"
        unset gitshell_prefix gitshellplus
    else
        gitshell_prefix="$(eval printf '+%.0s' {1..$gitshellplus})"
    fi

    return $ret
}
export -f _gitshell

function gitshell() {
    declare -i ret=1
    if [ "x${1:-}" == "x-r" ]; then
        shift
        ret=0
    fi
    while [ $ret -ne 123 ]; do
        if [ $ret -eq 0 ]; then
            gfreload
        else
            echo
        fi
        STANDALONE=1 _gitshell "$@"
        ret=$?
    done
    echo
}
export -f gitshell

function gfreload() {
    test -z "${1:-}" && p="${gfreload_pathname}" || p="$(readlink -fem $1)"
    unset -f colors_codes_generation _op_action gitshell
    if GFRELOAD=1 source "$p" >&3; then
        gfreload_pathname="$p"
        gfrefdir_path="${p%/*}"
        echo -e "\n${DONE}: reload path ${gfrefdir_path}\n"
    fi
}
export -f gfreload

function gfupdate() {
    ${gfrefdir_path}/install.sh update
}
export -f gfupdate

function gflist() {
    test -r ${gfunctions_pathname} || return 1
    sed -ne "s,^export -f \([^_][^ ]*\).*,\\1,p" ${gfunctions_pathname} | egnc .
}
export -f gflist

function gfhelp() {
    echo -e "\n${USAGE}: $(gflist | tr '\n' ' ')\n"
    echo -e "${NOTICE}: install path ${gfrefdir_path}\n"
}
export -f gfhelp

###############################################################################
else echo "${THIS_FILE_NAME} not reloaded, try again with 'GFRELOAD=1 source'"
fi ############################################################################
${resetx:-}
true

