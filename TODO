git config --global alias.amend-to '!f() { SHA=`git rev-parse "$1"`; git stash -k && git commit --fixup "$SHA" && GIT_SEQUENCE_EDITOR=true git rebase --interactive --autosquash "$SHA^" && git stash pop; }; f'

The name amend-to seems appropriate IMHO. Compare the flow with --amend:

git add . && git commit --amend --no-edit
# vs
git add . && git amend-to <REV>

source: https://stackoverflow.com/questions/1186535/how-do-i-modify-a-specific-commit

--------------------------------------------------------------------------------

input hash dsha # no pending modification is required
export hash # use a better name to avoid collisions
sw $hash >$hash.diff; add $hash.diff
for i in $(sf $hash); do
    cp -arf $i $i.1
    add $i.1
done
cm -m $hash.diff
irebase $dsha 
    # move the hash commit at the point in which new commit should be inserted)
ce $(lgrp -s $hash.diff)
    # patch -p1 < $hash.diff 
    #     OR
    # xxdiff $file.1 $file
    
--------------------------------------------------------------------------------

gfreload & Co.should do nothing in girshell

gitshell as separate file for users

in cr-editor do not set vi as default but read the config before

forig: rinominare frmt? 
ok - should fetch the only source present even if not "origin"
ok - should fetch all the source present if "-a" is declared
- should fetch a specific source "$name" if declared
- should fetch a specific source "$abbr" if $abbr fits the letter of one single branch

radd/rdel: short for
- git remote add/rdel $name $url.git

hrst with -o origin ?

bsw - should keep in considerration the change of repository

install.sh should relies on commit hash not branch

lsbr() should be revisited and getops is necessary

--------------------------------------------------------------------------------

commit-move.sh

input hash dsha # no pending modification is required
export hash # use a better name to avoid collisions
sw $hash >$hash.diff; add $hash.diff
for i in $(sf $hash); do
    cp -arf $i $i.1
    add $i.1
done
cm -m $hash.diff
irebase $dsha # move the hash commit at the point in which new commit should be inserted)
ce $(lgrp -s $hash.diff)
    patch -p1 < $hash.diff 
        OR
    xxdiff $file.1 $file
    
