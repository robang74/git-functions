#!/bin/bash
#
# Copyright (c) Roberto A. Foglietta, 2022
#
# Authors:
#  Roberto A. Foglietta <roberto.foglietta@gmail.com>
#
# SPDX-License-Identifier: GPLv3
#

SRC_FILE=$(readlink -f ${BASH_SOURCE[0]})
source "$(dirname ${SRC_FILE})/colors.shell"
export gfreload_pathname="${SRC_FILE}"

test ${gflistshow:-0} -ne 0 && set -x

function gfreload() {
    source "${gfreload_pathname}"
}
export -f gfreload

function gfupdate() {
    eval ${gfreload_pathname/git.functions/install.sh update} && gfreload
}
export -f gfupdate

function gflist() {
    gflistshow=1
    gfreload 2>&1 | sed -ne "s,.*export -f ,,p"
    gflistshow=0
}
export -f gflist

function gfhelp() {
    echo -e "\n${USAGE}: $(gflist | tr '\n' ' ')\n"
}
export -f gfhelp

function irebase() {
    test -z "$1" && return 1
    hash=$(git rev-list --parents -n2 "$1" | tail -n1 | head -c40)
    test -n "$hash" && git rebase -i $hash
}
export -f irebase

function repshrink() {
	git reflog | egrep .
	git gc --auto
	git maintenance run --auto
	git reflog expire --expire=now --all && git gc --prune=now --aggressive
}
export -f repshrink

function lg() {
	git log --abbrev-commit --format=format:'* %C(bold cyan)%h%C(reset) - %C(white)%s%C(reset) %C(bold green)%d%C(reset)' "$@"
}
export -f lg

function lt() {
	git log --graph --abbrev-commit --decorate --format=format:'%C(bold cyan)%h%C(reset) - %C(white)%s%C(reset) %C(bold green)%d%C(reset)' --all "$@"
}
export -f lt

function st() {
	git status "$@"
}
export -f st

function ff() {
	local opt
	if [ "$1" == "-s" ]; then
		opt="--staged"
		shift
	fi
	git diff $opt "$@"
}
export -f ff

function rl() {
	git reflog "$@"
}
export -f rl

function add() {
	git add "$@"
}
export -f add

function cm() {
	git commit --signoff "$@"
}
export -f cm

function amend() {
	git commit --amend "$@"
}
export -f amend

function editorset() {
    test -z "$1" && return 1
    git config --global core.editor "$1"
}
export -f editorset

function rpull() {
	git pull --rebase "$@"
}
export -f rpull

function push() {
	git push "$@"
}
export -f push

function fpush() {
	git push --force "$@"
}
export -f fpush

function co() {
	git checkout "$@"
}
export -f co

function sw() {
	git show "$@"
}
export -f sw

function forig() {
    git fetch origin "$@"
}
export -f forig

function pcache() {
	local -i t=3600 runcmd=1
	local d=$(git rev-parse --show-toplevel)
	if [ "x$1" == "x--save" -a -n "$2" ]; then
		echo "$2" > $d/.gitpasswd
		echo -e "\n${NOTICE}: password saved in $d/.gitpasswd\n"
		history -d -1 2>/dev/null || history -c
		shift 2
	elif [ "x$1" == "x--stop" ]; then
		t=0; runcmd=0
	elif [ "x$1" == "x--time" -a -n "$2" ]; then
		t=$2; [ $t -lt 600 ] && t=600
		echo -e "\n${NOTICE}: timeout '$2' has been set to $t seconds\n"
		shift 2
	elif [ "x$1" == "x--help" ]; then
		echo -e "\n${USAGE}: cchace [ --time 14400 | --save '.gitpasswd' | --stop | --help ]\n"
		return
	fi
	git config credential.helper store
	git config credential.helper "cache --timeout=$t"
	if [ "$t" == "0" ]; then
		echo -e "${DONE}: git password cache disabled"
	else
		if [ -r "$d/.gitpasswd" ]; then
			if ! grep -q "/.gitpasswd" "$d/.gitignore" 2>/dev/null; then
				echo "/.gitpasswd" >> "$d/.gitignore"
			fi
            st "$d/.gitignore" | egrep -q .gitignore \
                && echo -e "\n${WARNING}: add .gitignore and commit the change\n"
			git -c credential.helper='!f() { echo "password=$(cat '$d/.gitpasswd')"; }; f' push --dry-run 2>/dev/null
		else
			forig
		fi
		echo -e "${DONE}: git password cache enable for ${t}s eq. to $[t/3600]h $[(t%3600)/60]m $[t%60]s\n"
	fi
	test  "$1" != "" -a "$runcmd" == "1" && eval "$@"
}
export -f pcache

function rcont() {
	git rebase --continue
}
export -f rcont

function stash() {
	git stash "$@"
}
export -f stash

function pop() {
	git stash pop "$@"
}
export -f pop

function tagdel() {
    test -z "$1" && return 1
    git push --delete origin "$1"
    git tag -d "$@"
}
export -f tagdel

function tagadd() {
    test -z "$1" && return 1
    local tag="$1"; shift
    git tag -a "$tag" "$@" -m "$tag" && \
        git push origin --tags
}
export -f tagadd

function pull() {
	git pull "$@"
}
export -f pull

function fpatch() {
    test -z "$1" && return 1
	git format-patch -1 "$@"
}
export -f fpatch

function chpk() {
	for i in "$@"; do
		git cherry-pick $i || return $?
	done
}
export -f chpk

function lsbr() {
    git branch -r | grep -ve "/HEAD$" -ve "/HEAD " | cut -d/ -f2-
}
export -f lsbr

function bsw() {
    test -z "$1" && return 1
    git switch "$@"
}
export -f bsw

function for-all-other-branches() {
    test -z "$1" && return 1

#   local sha=$(git rev-parse --short HEAD)
    local cur=$(git branch --show-current)
    if [ "$cur" == "" ]; then
        echo -e "${ERROR}: this is not the HEAD of a branch. Abort!" >&2
        return 1
    fi

    declare -i nbr=$(lsbr | wc -l)
    if [ $nbr -le 1 ]; then
        echo -e "${DONE}: there is only one branch '$cur' as current. Abort!" >&2
        return 0
    fi

    if echo "x$@" | grep -q "fpush"; then
        echo -e "${ERROR}: fpush is not allowed for safety. Abort!" >&2
        return 1
    fi
    if echo "x$@" | grep -qe "push.*-f"; then
        echo -e "${ERROR}: push -f is not allowed for safety. Abort!" >&2
        return 1
    fi
    if echo "x$@" | grep -q -- "--force"; then
        echo -e "${ERROR}: option --force is not allowed for safety. Abort!" >&2
        return 1
    fi

    local rpull="true" stashpop=0
    while true; do
        if [ "x$1" == "x-p" ]; then
            rpull="git pull"
        elif [ "x$1" == "x-r" ]; then
            rpull="rpull"
        elif [ "x$1" == "x-a" ]; then
            BRANCHES=$(lsbr)
        elif [ "x$1" == "x-s" ]; then
            stashpop=1
        else
            break
        fi
        shift
    done

    if [ $stashpop -eq 0 ]; then
        local warn=$(st | grep -e "^Changes [not]* ")
        if [ -n "$warn" ]; then
            echo -e "${WARNING}: changes pending, please stash (-s) or commit. Abort!" >&2
            return 1
        fi
    fi

    curdir=$(readlink -f $PWD)
    topdir=$(readlink -f $(git rev-parse --show-toplevel))
    if [ "$curdir" == "$topdir" ]; then
        true
    elif ! cd $topdir; then
        echo -e "${ERROR}: cannot change folder to the top level. Abort!" >&2
        return 1
    fi
    forig || return $?

    test $stashpop -ne 0 && stash

    BRANCHES=${BRANCHES:-$(lsbr | grep -vwe "$cur")}
	for branch in ${BRANCHES}; do
        if ! bsw $branch; then
            echo
            echo -e "${byellow}branch: $branch, SKIP${coloff}"
            echo "press ENTER to continue..."
            read
        elif eval "$rpull" && eval "$@"; then
            echo
            echo -e "${bgreen}branch: $branch, OK${coloff}"
            echo
        else
            echo
            echo -e "${bired}mbranch: $branch, KO${coloff}"
            echo "fix the problem and then type exit"
            echo "or type exit 1 to abort completely"
            echo
            local ret=0
            gitrc=$(mktemp -p "$TMPDIR" gitrc.XXXX)
            cat git.functions >"$gitrc"
            echo "PS1='${bcyan}+git${coloff}:${byellow}'$branch'${coloff}> '" >>"$gitrc"
            if ! bash --rcfile "$gitrc" -ri; then
                rm -f "$gitrc"
                bsw $cur
                return 1
            fi
            rm -f "$gitrc"
        fi
	done
    unset BRANCHES
    test "$cur" != "$branch" && bsw $cur
    test $stashpop -ne 0 && pop
}
export -f for-all-other-branches

function lgrp() {
    test -z "$1" && return 1
    local strn=$1; shift
    lg "$@" | grep "$strn" | awk '{print $2}' | egrep .
}
export -f lgrp

test ${gflistshow:-0} -ne 0 && set +x
