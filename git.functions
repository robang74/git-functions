#!/bin/env bash
#
# Copyright (c) Roberto A. Foglietta, 2022-2023
#
# Authors:
#  Roberto A. Foglietta <roberto.foglietta@gmail.com>
#
# SPDX-License-Identifier: GPLv3
#
#set -x && resetx="set +x" # RAF: source, paired with set +x at the end of file
set -u                     # RAF: only for devel, comment in main

if [ ${GFRELOAD:-0} -eq 0 ]; then
    echo "${BASH_SOURCE[0]##*/} not reloaded, try again with 'GFRELOAD=1 source'"
    return 1
fi
type _op_action 2>&1 | grep -q "is a function" && return 0

trap 'echo -e "\n${ERROR:-ERROR}: in '${BASH_SOURCE[0]##*/}\
' at line ${LINENO} occured, try again with set -x\n" >&2' ERR

################################################################################

function _op_action() { false; }; export -f _op_action

if [ ${GITSHLVL:-0} -lt 1 ]; then
    # RAF: restricted shell cannot redirect to file but it is fine
    #      to redirect to a open file descriptor towards /dev/null
    #      So, also exec could fail but in gitshell &3 is just open
    exec 3>/dev/null || return $?

    SRC_FILE=${SRC_FILE:-${gfreload_pathname:-}}
    SRC_FILE=${SRC_FILE:-$(readlink -f ${BASH_SOURCE[0]})}
    export gfbasicenv_pathname="${SRC_FILE%/*}/git.basicenv"
    GFRELOAD=1 source "${gfbasicenv_pathname}" || return $?
    : #RAF: the line above will be stripped
fi #>&3

if ! type gitshell >&3 2>&3; then
    GFRELOAD=1 source "${gitshell_pathname}" || return $?
    : #RAF: the line above will be stripped
fi #>&3

echo "Loading ${BASH_SOURCE[0]##*/} into current bash enviroment"

################################################################################

export BRNC_SWTC_PREV_BRNC=${BRNC_SWTC_PREV_BRNC:-}
export BRNC_SWTC_PREV_HASH=${BRNC_SWTC_PREV_HASH:-}

function _op_action() {
    local op=""
    case "${1:-}" in
    a) op="am"
        ;;
    c) op="cherry-pick"
        ;;
    m) op="merge"
        ;;
    r) op="rebase"
        ;;
    *) op=$(opst)
        ;;
    esac
    _git ${op:-none} $2 || return $?
    test -n "$op" && echo -e "\ngit ${op} $2: ${OK}\n"
}
export -f _op_action

function _git_core_editor_export() {
    unset -f vi vim
    export git_core_editor="$(git config --default vi --get core.editor)"
    return $?

    if [ "${git_core_editor:0:2}" == "vi" ]; then
        local gitcols="hi gitcommitSummary ctermfg=yellow ctermbg=red"
        eval "$git_core_editor() { command $git_core_editor -c '$gitcols'"\
             " \"\$@\"; } ; export -f $git_core_editor"
#       $git_core_editor="$git_core_editor -c '"$gitcols"'"
    fi
}
export -f _git_core_editor_export

function _is_sha_in_line() {
    test -n "${1:-}" || return 1
    command git log --abbrev-commit --no-color --format=format:'%h' | egnc "$(hconv $1)"
}
export -f _is_sha_in_line

function _opst_msg() {
    local op=$(opst)
    test -n "$op" || return 1
    echo -e "\n${WARNING}: operation '$op' in progress, abort\n"
    st -m
    echo
}
export -f _opst_msg

function _chgs_msg() {
    local ch=$(st -m)
    test -n "$ch" || return 1
    echo -e "\n${WARNING}: changes pending, please stash or commit, abort.\n" >&2
    echo -e "$ch\n"
}
export -f _chgs_msg

function _copy_function() {
    test -n "${2:-}" || return 1
    test -n "$(declare -f "$1")" && eval "${_/$1/$2}"
}
export -f _copy_function

function _rename_function() {
    test -n "${2:-}" || return 1
    _copy_function "$1" "$2"
    unset -f $1
}
export -f _rename_function

################################################################################
test ${gflistshow:-0} -ne 0 && set -x && resetx="set +x" #######################

function less() {
    command less -Fr "$@"
}
export -f less

function egnc() {
    command egrep --color=never "$@"
}
export -f egnc

function grnc() {
    command grep --color=never "$@"
}
export -f grnc

function ll() {
    command ls -al --color=always "$@"
}
export -f ll

function eg() {
    command egrep --color=always "$@"
}
export -f eg

function grep() {
    command grep --color=always "$@"
}
export -f grep

function egrep() {
    command egrep --color=always "$@"
}
export -f egrep

# RAF: these are just for gflist()
if false; then
export -f gitshell
export -f gfreload
export -f gfupdate
export -f gflist
export -f gfhelp
fi

################################################################################

function noopts() {
    local i
    for i in "$@"; do
        test "x${i:0:1}" != "x-" && echo $i
    done
}
export -f noopts

function redef_git() {
    unset -f _git
    if [ "x${1:-}" == "x-u" ]; then
        function _git() { ugit "$@"; }
    else
        eval 'function _git() { '"$@"'; }'
    fi
    export -f _git
}
export -f redef_git

function reset_git() {
    unset -f _git
    function _git() { command git "$@"; }
    export -f _git
}
export -f reset_git

reset_git ######################################################################

function ce() {
    test -n "${1:-}" || return 1
    declare -i ret=0 quit=0
    if [ "x$1" == "x--abort" -a -n "${commit_edit_head:-}" ]; then
        git reset --hard ${commit_edit_head:-} && abrt
        ret=$?
        quit=1
    elif [ "x${1:0:6}" == "x--cont" -a -n "${commit_edit_hash:-}" ]; then
        add $( sf ${commit_edit_hash} )
        if GIT_EDITOR="touch" cm -a --amend; then
            cont
            ret=$?
            quit=1
        else
            ret=1
        fi
    else
        _opst_msg && return $?
        _chgs_msg && return $?
        _git_core_editor_export
        export commit_edit_note="use 'ce --abort/cont' while 'cm' has '--amend' by default here, enjoy."
        export commit_edit_opts="--amend"
        export commit_edit_brch="$(bcur)"
        export commit_edit_head="$(hcur)"
        export commit_edit_hash="${1:-$commit_edit_head}"
               commit_edit_hash="$(hconv $commit_edit_hash)"
        export gitshell_prefix="ce($commit_edit_hash)"
        local prev_exit_func=$(type exit | sed -e "s,exit is a function.*,,")
        function exit() {
            local op=$(opst)
            if [ -n "$op" ]; then
                echo -e "\n${WARNING}: ${op} in progress, please complete the job or abort it."
                echo -e "\n${NOTICE} : ${commit_edit_note}\n"
                return 1
            fi
            command exit ${1:-} 2>&3
        }
        _copy_function add _add
        function add() {
            if [ "x${1:-}" == "x-a" ]; then
                shift
                _add "$@" $(sf ${commit_edit_hash})
                return $?
            fi
            _add "$@"
        }
        _gitshell "$(declare -pf exit add _add; declare -p git_core_editor);"\
            "git commit-edit ${commit_edit_hash}"' || exit $?' || ret=$?
        test -n "$prev_exit_func" && eval "$prev_exit_func"
        _rename_function _add add
    fi
    unset commit_edit_opts commit_edit_brch \
          commit_edit_head commit_edit_hash \
          commit_edit_note gitshell_prefix \
          git_core_editor
    test $quit -ne 0 && command exit $ret 2>&3
    return $ret
}

function pa() {
    local i wopts
    test -n "${1:-}" || return 1
    redef_git -u
    for i in "$@"; do
        wopts="--ignore-space-change --ignore-whitespace"
        if _git apply --check --stat $wopts "$i" && \
           _git am -p1 --keep-cr $wopts --signoff "$i" \
        && sw -P; then
            echo -e "\n${DONE}: applying '$(basename $i)'.\n"
        else
            echo -e "\n${ERROR}: applying '$(basename $i)', abort.\n"
            break
        fi
    done
    reset_git
}
export -f pa

function ugit() {
    declare -i ret=0
    local solib="${gfrefdir_pathdir}/isatty_override.so"
    test -r "${solib}" || solib=""
    LD_PRELOAD="${solib}" git -P "$@" || ret=$?
    echo; return $ret
}
export -f ugit

function irb() {
    _opst_msg && return $?
    _chgs_msg && return $?
    if [ -z "${1:-}" ]; then irebase HEAD; return $?; fi
    if [ "x${1:0:1}" == "x~" -o "x${1:0:1}" == "x-" ]; then
        test -n "${1:1}" && irb HEAD~${1:1}
        return $?
    fi
    local hash=$(_git rev-list --parents -n2 "$1" | tail -n1 | head -c40)
    test -n "$hash" && _git rebase -i $hash
}
export -f irb

function irebase() {
    irb "$@"
}
export -f irebase

function cr() {
    declare -i ret=0
    local sha=$(_is_sha_in_line ${1:-HEAD})
    test -n "$sha" || return 1

    _opst_msg && return $?
    _chgs_msg && return $?
    _git_core_editor_export
    export irebase_sha_to_reword="$sha"
    local edcr="${gfrefdir_pathdir}/bin/cr-editor.sh"
    GIT_EDITOR="${edcr}" GIT_SEQUENCE_EDITOR="${edcr}" irebase "$sha" || ret=1
    unset irebase_sha_to_reword git_core_editor
    test $ret -ne 0 && abrt
    return $ret
}
export -f cr

function repshrink() {
	_git reflog | egrep .
	_git gc --auto
	_git maintenance run --auto
	_git reflog expire --expire=now --all && \
        _git gc --prune=now --aggressive
}
export -f repshrink

function rmt() {
    _git remote "$@"
}
export -f rmt

function merge() {
    _git merge "$@"
}
export -f merge

function mtool {
    _git mergetool "$@"
}
export -f mergetool

function mclean() {
    local i
    for i in BACKUP BASE LOCAL REMOTE; do
        find . -name \*_${i}_\* -delete
    done
}
export -f mclean

function ren() {
    _git mv "$@"
}
export -f ren

function rmtadd() {
    local repo url
    if [ "x${1:-}" == "x-G" ]; then
        shift
        test -n "${1:-}" || return 1
        repo=${1:-};
        shift
        test -n "${1:-}" || return 1
        url="https://github.com/$repo/$1.git"
        rmtadd $repo ${url/.git.git/.git}
        return $?
    elif [ "x${1:-}" == "x-g" ]; then
        shift
        test -n "${1:-}" || return 1
        repo=${1%/*}
        repo=${repo##*/}
        rmtadd $repo $1
        return $?
    fi
    test -n "${1:-}" || return 1
    repo=$(noopts "$@" | head -n1)
    test -n "$repo" || return 1
    rmt add "$@" -f \
    && lsbr -r | grnc -e "^$repo/"
}
export -f rmtadd

function rmtdel() {
    test -n "${1:-}" || return 1
    rmt remove "$1"
}
export -f rmtdel

function lg() {
	_git log --abbrev-commit --format=format:'* %C(bold cyan)%h%C(reset) - %C(white)%s%C(reset) %C(bold green)%d%C(reset)' "$@"
}
export -f lg

function lgnc() {
	_git log --abbrev-commit --format=format:'* %h - %s %d' "$@"
}
export -f lgnc

function lg1() {
	lg -n1 "$@"
}
export -f lg1

function lt() {
	_git log --graph --abbrev-commit --decorate --format=format:'%C(bold cyan)%h%C(reset) - %C(white)%s%C(reset) %C(bold green)%d%C(reset)' --all "$@"
}
export -f lt

function st() {
    if [ "x${1:-}" == "x-m" ]; then
        shift
        _git status -s "$@" | sed -ne 's,^[ MAUR]\{2\} *\(.*\),\1,p' | grnc .
    else
        _git status "$@"
    fi
}
export -f st

function ch() {
    _git status --untracked-files=no "$@"
}
export -f ch

function ff() {
	local opt=""
	if [ "${1:-}" == "-s" ]; then
		opt="--staged"
		shift
	elif [ "${1:-}" == "-o" ]; then
        opt="origin/${2:-$(bcur)}"
		shift
	elif [ "${1:-}" == "-r" ]; then
        opt="$(rcur)/${2:-$(bcur)}"
		shift
	fi
	_git diff -w $opt "$@"
}
export -f ff

function rl() {
	_git reflog "$@"
}
export -f rl

function reflog() {
	rl "$@"
}
export -f reflog

function add() {
    if [ "x${1:-}" == "x-m" ]; then
        _git add $(st -m | sed -e "s,^.* -> ,,")
    else
        _git add "$@"
    fi
}
export -f add

function cm() {
	_git commit ${commit_edit_opts:-} --signoff "$@"
}
export -f cm

function amd() {
    local i
    if [ "x${1:-}" == "x-m" ]; then
        shift
        add -m
    else
        for i in "$@"; do
            if [ "x$i" == "x-a" ]; then
                add -m
                break
            fi
        done
    fi
	_git commit --amend "$@"
}
export -f amd

function amend() {
	amd "$@"
}
export -f amend

function ampatch() {
    for i in "$@"; do
        if ! _git am --keep-cr < "$i"; then
            git am --show-current-patch=diff || return $?
        fi
    done
}
export -f ampatch

function amff() {
    git am --show-current-patch=diff "$@"
}
export -f amff

function editorset() {
    test -n "${1:-}" || return 1
    _git config --global core.editor "$1"
}
export -f editorset

function rpull() {
	_git pull --rebase "$@"
    _git rebase --reapply-cherry-picks
}
export -f rpull

function push() {
	_git push "$@"
}
export -f push

function fpush() {
	_git push --force "$@"
}
export -f fpush

function co() {
    _git checkout "$@"
}
export -f co

function sw() {
    if [ "x${1:-}" == "x-P" ]; then
        shift
        ugit show -w "$@"
    else
	    _git show -w "$@"
    fi
    if ! echo "$@" | egnc -q -- "--oneline"; then
        printf -- '_%.0s' {1..72}
        echo -e "\nfiles in commited:"
        sf $(noopts "$@") | sed -e "s,\(.*\),\t\\1,"
        echo
    fi
}
export -f sw

function lsrmt() {
    rmt -v
}
export -f lsrmt

function sf() {
    _git show --raw "$@" | egrep "^:[0-9]*" | awk '{ print $6 }'
}
export -f sf

function frmt() {
   local rmt=""
   if [ -z "${1:-}" ]; then
       rmt=$(rmt | head -n1)
       test -n "${rmt}" || return 1
   elif [ "x$1" == "x-a" ]; then
       rmt="--all"
   elif rmt | egnc -qw -- "$1"; then
        rmt="$1"; shift
   fi
   echo "Fetching ${rmt}"
    _git fetch ${rmt} "$@"
}
export -f frmt

function forig() {
    _git fetch origin "$@"
}
export -f forig

function pcache() {
    function getgit_passwd() {
        if true; then
            command git config --get-all --show-origin --show-scope user.password
            if [ -r "${1:-}" ]; then
                local gitpasswd=$(cat "$1")
                echo -e "pcache\tfile:.gitpasswd\t${gitpasswd}"
            fi
        fi | awk '{ print $3 }' | egnc . | tail -n1
    }

	local -i t=3600
    local gituser="" gitpasswd_filename=".gitpasswd"
	local d=$(command git rev-parse --show-toplevel)
    local gitpasswd_filepath="$d/$gitpasswd_filename"

	if [ "x${1:-}" == "x--save" -a -n "${2:-}" ]; then
		echo "$2" > "$gitpasswd_filepath"
		echo -e "\n${NOTICE}: password saved in $gitpasswd_filepath\n"
        if true; then
            history -d -2 || history -c
        fi >&3 2>&1
		shift 2
	elif [ "x${1:-}" == "x--stop" ]; then
		t=0
	elif [ "x${1:-}" == "x--user" -a -n "${2:-}" ]; then
        gituser=$2
        shift 2
	elif [ "x${1:-}" == "x--time" -a -n "${2:-}" ]; then
		t=$2; [ $t -lt 600 ] && t=600
		echo -e "\n${NOTICE}: timeout '$2' has been set to $t seconds\n"
		shift 2
	elif [ "x${1:-}" == "x--help" ]; then
		echo -e "\n${USAGE}: cchace [ --time 14400 | --save '${gitpasswd_filename}' | --stop | --help ]\n"
		return
	fi

	if [ "$t" == "0" ]; then
        command git config --unset user.password
		command git config --unset credential.helper
        command git config --unset credential.credentialstore
		echo -e "\n${DONE}: git password cache disabled"
	else
		if [ -e "gitpasswd_filepath" ]; then
            touch "$d/.gitignore"
			if ! grep -q "/$gitpasswd_filename" "$d/.gitignore"; then
				echo "/$gitpasswd_filename" >> "$d/.gitignore"
			fi
			st -s "$d/.gitignore" | egrep -qw .gitignore && \
				echo -e "\n${WARNING}: add .gitignore and commit the change"
		fi

	    local pc="cache --timeout=$t"
        local gitpasswd=$(getgit_passwd "$d/.gitpasswd")
        local ch="!f() { echo password='$gitpasswd'; }; f"
        test -n "$gitpasswd" || ch="manager"

        if [ -n "$gituser" ]; then
            for i in $(rmt); do
                rmturl=$(command git remote get-url $i |\
                    sed -ne "s,\(http[s:]*//\).*\@,\\1${gituser}@,p" \
                         -e "s,\(http[s:]*//\),\\1${gituser}@,p" | head -n1)
                command git remote set-url $i $rmturl
                command git remote get-url $i
            done
        fi

		command git config credential.helper "$pc"
        command git config user.password "$gitpasswd"
        command git config credential.credentialstore "store"
        command git -c credential.helper="$ch" push --force --dry-run 2>&3

		echo -e "\n${DONE}: git password cache enable for ${t}s eq. to $[t/3600]h $[(t%3600)/60]m $[t%60]s"
	fi

    echo -e "\nActual git configuration about credential, password and remote urls:\n"
    command git config -l --show-origin --show-scope | egnc -e credential -e user.password
    echo
    for i in $(rmt); do echo -e "$i:\t$(command git remote get-url $i)"; done
    echo
}
export -f pcache

function opst() {
    st | grep -v "git commit --amend" |\
        sed -ne 's,.*[userun]\{3\} .git \(.*\) --.*,\1,p' |\
            sort | head -n1 | egnc .
}
export -f opst

function cont() {
    if [ "x${1:-}" == "x-m" ]; then
        shift
        add -m
    fi
    if [ "${1:-}" == "ce" ]; then
        ce --continue
    else
        _op_action "${1:-}" --continue
    fi
}
export -f cont

function abrt() {
    if [ "${1:-}" == "ce" ]; then
        ce --abort
        return $?
    fi
    _op_action "${1:-}" --abort || return $?
    test ${GITSHLVL:-0} -gt 1 && exit
}
export -f abrt

function todo() {
   _op_action "${1:-}" --edit-todo
}
export -f todo

function skip() {
   _op_action "${1:-}" --skip
}
export -f skip

function stash() {
    _git stash "$@"
}
export -f stash

function pop() {
	_git stash pop -q "$@"; ch
}
export -f pop

function tagdel() {
    test -n "${1:-}" || return 1
    if [ ${#} -eq 2 ]; then
        _git push --delete "$1" "$2"
        shift
    elif [ ${#} -eq 1 ]; then
        _git push --delete $(rcur) "$1"
    else
        return 1
    fi
    _git tag -d "$1"
}
export -f tagdel

function tagadd() {
    declare ret=1
    test -n "${1:-}" || return 1
    local tag="$1"; shift
    if _git tag -a "$tag" "${1:-HEAD}" -m "$tag"; then
        if _git push $(rcur | head -n1) --follow-tags; then
            local shasrc=$(hconv ${1:-HEAD}) shadst=$(hconv $tag)
            if [ "$shasrc" == "$shadst" ]; then
                echo "${OK}: tag '$tag' added on sha $shadst == $shasrc"
                ret=0
            else
                echo "${KO}: tag '$tag' added on sha $shadst != $shasrc"
            fi
        fi
   fi
   return $ret
}
export -f tagadd

function tagren() {
	test -n "${2:-}" || return 1
	local sha=$(hconv "$1")
	test -n "$sha" || return 1
	tagdel "$1" && tagadd "$2" $sha
}
export -f tagren

function tagmv() {
    test -n "${1:-}" || return 1
    tagdel "$1"
    tagadd "$1" "${2:-HEAD}"
}
export -f tagmv

function pull() {
	_git pull "$@"
}
export -f pull

function fpatch() {
    test -n "${1:-}" || return 1
	_git format-patch -1 "$@"
}
export -f fpatch

function chpk() {
	for i in "$@"; do
		_git cherry-pick $i || return $?
	done
}
export -f chpk

function lsbr() {
    local opts=""

    # RAF, TODO: rewrite with getopts
    if [ "x${1:-}" == "x-a" -o "x${1:-}" == "x-r" ]; then
        opts="$1"; shift
    fi
    if [ "x${1:-}" == "x-c" -a -n "${2:-}" ]; then
        opts="--contains $2"
        shift 2
    elif [ "x${1:-}" == "x-c" -a "${2:-}" == "x-r" ]; then
        opts="--contains $(hcur)"
        shift
    elif [ "x${1:-}" == "x-c" -a "${2:-}" == "x-a" ]; then
        opts="--contains $(hcur)"
        shift
    elif [ "x${1:-}" == "x-c" ]; then
        opts="--contains $(hcur)"
        shift
    fi
    if [ "x${1:-}" == "x-a" -o "x${1:-}" == "x-r" ]; then
        opts="$1"; shift
    fi
    opts="--no-color --list $opts"
    command git branch $opts "$@" | sed -e "s,..,," -e "s,remotes/,," |\
        awk '{ print $1 }' | egnc -ve "/HEAD$" -ve "\(HEAD$" | sort
    return ${PIPESTATUS[0]}
}
export -f lsbr

export BRNC_SWTC_CURR_BRNC="${BRNC_SWTC_CURR_BRNC:-}"

function bsw() {
    test -n "${1:-}" || return 1
    local cb="$(bcur)" ch=$(hcur) nb=""
          cb=${cb:-$BRNC_SWTC_CURR_BRNC}
    if [ "x$1" == "x-" -a -n "${2:-}" ]; then
        return 1
    else
        if [ "x$1" == "x-" ]; then
            nb="${BRNC_SWTC_PREV_BRNC:-$cb}"
            set --
        fi
    fi
    declare -i ret=0
    if _git switch "$@" ${nb}; then
        BRNC_SWTC_PREV_BRNC="${cb}"
        if [ -n "${nb}" -a "$(hcur)" != "${BRNC_SWTC_PREV_HASH}" ]; then
            co ${BRNC_SWTC_PREV_HASH} 2>&1 | head -n1
            ret=${PIPESTATUS}
        else
            nb=$(bcur)
        fi
        BRNC_SWTC_PREV_HASH="${ch}"
        BRNC_SWTC_CURR_BRNC="${nb}"
    else
        ret=1
    fi
    return $ret
}
export -f bsw

function bcur() {
    local ret=0
    command git branch --show-current | egnc . || ret=$?
    test "x${1:-}" == "x-c" && return $ret
    test $ret -eq 0 && return $ret

    local text risp opts="--current --topo-order --no-color"
    text=$(command git show-branch $opts "$@")
    declare -i n=$(echo "$text" | egnc -n "^-" | head -n1 | cut -d: -f1)
    risp=$(echo "$text" | head -n$n | sed -ne "s,[ +]*\[HEAD.*\].*,," \
        -e "s/[ +]*\* *\[\([^ ]*\)] .*/\\1/p" | head -n1)
    test -n "$risp" && echo "$risp" && return 0
    echo "$text" | head -n$[n+2] | tail -n2 | sed -n \
        -e "s,[ +*\!]\[HEAD.*\].*,," -e "s/[ +*\!]*\[\([^ ]*\)] .*/\\1/p" |\
           head -n1 | egnc .
    return $?
}
export -f bcur

function cdtop() {
    local curdir="$(readlink -f $PWD)"
    local topdir="$(_git rev-parse --show-toplevel)"
    if [ "$topdir" != "$curdir" ]; then
        cd "$topdir" || return $?
    fi
    pwd
}
export -f cdtop

function hconv() {
    test -n "${1:-}" || return 1
    local sha=$(command git rev-list -n1 $1)
    echo ${sha:0:7} | egnc "......."
}
export -f hconv

function hcur() {
    hconv HEAD
}
export -f hcur

function for-all-other-branches() {
    test -n "${1:-}" || return 1
    _opst_msg && return $?

    local cur=$(bcur -c)
    if [ "$cur" == "" ]; then
        echo -e "\n${ERROR}: this is not the HEAD of a branch.\n" >&2
        return 1
    fi

    if echo "x$@" | grep -q "fpush"; then
        echo -e "\n${ERROR}: fpush is not allowed for safety.\n" >&2
        return 1
    fi
    if echo "x$@" | grep -qe "push.*-f"; then
        echo -e "\n${ERROR}: push -f is not allowed for safety.\n" >&2
        return 1
    fi
    if echo "x$@" | grep -q -- "--force"; then
        echo -e "\n${ERROR}: option --force is not allowed for safety.\n" >&2
        return 1
    fi

    local rpull="true" stashpop=0 nofail="" fetch=""
    while true; do
        if [ "x$1" == "x-p" ]; then
            rpull="pull"
        elif [ "x$1" == "x-r" ]; then
            rpull="rpull"
        elif [ "x$1" == "x-a" ]; then
            BRANCHES=$(lsbr)
        elif [ "x$1" == "x-s" ]; then
            stashpop=1
        elif [ "x$1" == "x-n" ]; then
            nofail="; true"
        elif [ "x$1" == "x-f" ]; then
            fetch="yes"
        else
            break
        fi
        shift
    done

    if [ $stashpop -eq 0 ]; then
        _chgs_msg && return $?
    fi

    if [ -z "${BRANCHES:-}" ]; then
        if [ -z "$fetch" ]; then
        BRANCHES=${BRANCHES:-$(lsbr | grnc -vwe "$cur")}
        elif [ -n "$fetch" ] && ! frmt; then
            echo -e "\n${ERROR}: cannot fetch all remotes, abort.\n" >&2
            return 1
        else
            BRANCHES=$(lsbr -r | cut -d/ -f2 | grnc -vwe "$cur")
        fi
        if [ -z "${BRANCHES:-}" ]; then
            echo -e "\n${DONE}: there is only one branch '$cur' as current.\n" >&2
        return 0
        fi
    fi

    test $stashpop -ne 0 && stash

    declare -i ret=0
	for branch in ${BRANCHES}; do
        if ! bsw $branch; then
            echo
            echo -e "${bylw}branch: $branch, SKIP${crst}"
            echo "press ENTER to continue..."
            read
        elif eval "$rpull" && eval "$@""${nofail}"; then
            echo
            echo -e "${blgrn}branch: $branch, OK${crst}"
            echo
        else
            echo
            echo -e "${blred}branch: $branch, KO${crst}"
            echo "fix the problem and then enter 'exit'"
            echo "or enter 'exit 1' to abort completely"
            echo
            _gitshell || ret=$?
            test $ret -ne 0 && break
        fi
	done
    unset BRANCHES
    test "$cur" != "$branch" && bsw $cur
    if [ $stashpop -ne 0 ]; then pop -q; st -s; fi
    return $ret
}
export -f for-all-other-branches

function lgrp() {
    test -n "${1:-}" || return 1
    sha=""
    while true; do
        if [ "${1:-}" == "-s" ]; then
            sha="-s"
            shift
        elif [ "${1:-}" == "-1" ]; then
            shift
            lgrp ${sha} "$@" | head -1
            return $?
        else
            break
        fi
    done

    redef_git -u
    local strn="$1"; shift
    if [ -n "$sha" ]; then
        lgnc "$@" | grnc "$strn" | awk '{print $2}'
    else
        lg "$@" | command grep --color=always "$strn"
    fi
    ret=${PIPESTATUS[1]}
    reset_git

    return $ret
}
export -f lgrp

function lstag() {
    _git tag -l "$@"
}
export -f lstag

function tagl() {
    lstag
}
export -f tagl

function tagls() {
    lstag
}
export -f tagls

function rst() {
    test -n "${1:-}" || return 1
    local i rm="" bn="" opts="" hd=""
    for i in "$@"; do
        if [ "x$1" == "x-h" ]; then
            hd="--hard"
        elif [ "x$1" == "x-r" ]; then
            rm="$(rcur | head -n1)"
            rm="${rm:+$rm/}"
        elif [ "x$1" == "x--branch-head" ]; then
            bn=$(bcur) #"$(bcur -e)"
        else
            opts="$opts $1"
        fi
        shift
    done
    _git reset $hd ${rm}${bn} $opts
}
export -f rst

function hrst() {
    rst -h "$@"
}
export -f hrst

function res() {
    local opt=""
    if [ "x${1:-}" == "x-s" ]; then
        opt="--staged"
        shift
    elif [ "x${1:-}" == "x-h" ]; then
        shift
        sres "$@" 2>&3
        co "$@"
        return $?
    fi
    _git restore $opt "$@"
}
export -f res

function sres() {
    res -s "$@"
}
export -f sres

function hres() {
    res -h "$@"
}
export -f hres

function mgrp() {
    local files=""
    test -n "${1:-}" || return 1
    if [ -n "${2:-}" ]; then
        if [ "x${2:0:1}" == "x~" -o "x${2:0:1}" == "x-" ]; then
            test -n "${2:1}" && mgrp "$1" HEAD~${2:1}
            return $?
        fi
        local sha=$(_is_sha_in_line $(hconv $2))
        test -n "$sha" || return 1
        files=$(git diff --stat --name-only $sha~1 $(hconv ${3:-}))
        test -n "$files" || return 1
    else
        files=$(st -m)
    fi
    grep -n "$1" $files 2>&3
}
export -f mgrp

function search() {
    test -n "${1:-}" || return 1
    _git log -p --source -s --oneline -S "$@"
}
export -f search

function rbcur() {
    local i cb=$(bcur) rcb=""
    test -n "$cb" || return 1
    rcb=$(lsbr -r | egnc "/${cb}$")
    if echo "$rcb" | egnc "^origin/"; then
        return 0
    fi
    echo "$rcb" | tail -n1 | egnc .
}
export -f rbcur

function rcur() {
    rbcur | cut -d/ -f1 | egnc .
}
export -f rcur

################################################################################
${resetx:-}
trap -- ERR
true
